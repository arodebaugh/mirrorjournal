{"ast":null,"code":"import _asyncToGenerator from \"/Users/andrewrodebaugh/Downloads/think-app-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as CryptoJS from 'crypto-js';\nimport { Haptics, ImpactStyle, NotificationType } from '@capacitor/haptics';\nimport { Directory, Encoding, Filesystem } from '@capacitor/filesystem';\nimport { Preferences } from '@capacitor/preferences';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@awesome-cordova-plugins/native-storage/ngx\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\n\nfunction PasswordDialogComponent_ion_title_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-title\");\n    i0.ɵɵtext(1, \"Reset passcode\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PasswordDialogComponent_ion_title_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-title\");\n    i0.ɵɵtext(1, \"Set passcode\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PasswordDialogComponent_ion_content_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-content\");\n    i0.ɵɵelement(1, \"img\", 1);\n    i0.ɵɵelementStart(2, \"ion-card\")(3, \"ion-card-content\", 2);\n    i0.ɵɵtext(4, \" This passcode will allow you to encrypt (AES-256) your journals... make sure you remember your passcode because you cannot reset/change without it!\");\n    i0.ɵɵelement(5, \"br\")(6, \"br\");\n    i0.ɵɵtext(7, \" It can be as long or as short as you'd like just remember the more complicated it is the harder to guess! \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"ion-item\")(9, \"ion-label\", 3);\n    i0.ɵɵtext(10, \"Enter passcode\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"ion-input\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function PasswordDialogComponent_ion_content_4_Template_ion_input_ngModelChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.passcodeInput = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"ion-item\")(13, \"ion-label\", 3);\n    i0.ɵɵtext(14, \"Re-enter passcode\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"ion-input\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function PasswordDialogComponent_ion_content_4_Template_ion_input_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.passcodeReinput = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(16, \"br\");\n    i0.ɵɵelementStart(17, \"div\", 2)(18, \"ion-button\", 5);\n    i0.ɵɵlistener(\"click\", function PasswordDialogComponent_ion_content_4_Template_ion_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.savePassword());\n    });\n    i0.ɵɵelement(19, \"ion-icon\", 6);\n    i0.ɵɵtext(20, \" Save\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"div\", 2)(22, \"ion-text\", 7);\n    i0.ɵɵlistener(\"click\", function PasswordDialogComponent_ion_content_4_Template_ion_text_click_22_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.dismiss());\n    });\n    i0.ɵɵtext(23, \"Never mind\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(24, \"br\")(25, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.passcodeInput);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.passcodeReinput);\n  }\n}\n\nfunction PasswordDialogComponent_ion_content_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-content\")(1, \"ion-card\")(2, \"ion-card-content\", 2)(3, \"b\");\n    i0.ɵɵtext(4, \"Forgot your passcode?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \" For now there isn't anything we can do about that because of our method of encrypting data (your passcode is not stored locally on device). In a future update, we are working on making the ability to continue making locked journals.\");\n    i0.ɵɵelement(6, \"br\")(7, \"br\");\n    i0.ɵɵtext(8, \" Sorry for any inconvenience. \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"ion-item\")(10, \"ion-label\", 3);\n    i0.ɵɵtext(11, \"Enter current passcode\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"ion-input\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function PasswordDialogComponent_ion_content_5_Template_ion_input_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.oldPasscodeInput = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"ion-item\")(14, \"ion-label\", 3);\n    i0.ɵɵtext(15, \"Enter new passcode\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"ion-input\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function PasswordDialogComponent_ion_content_5_Template_ion_input_ngModelChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.passcodeInput = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"ion-item\")(18, \"ion-label\", 3);\n    i0.ɵɵtext(19, \"Re-enter new passcode\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"ion-input\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function PasswordDialogComponent_ion_content_5_Template_ion_input_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.passcodeReinput = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(21, \"br\");\n    i0.ɵɵelementStart(22, \"div\", 2)(23, \"ion-button\", 5);\n    i0.ɵɵlistener(\"click\", function PasswordDialogComponent_ion_content_5_Template_ion_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.savePassword());\n    });\n    i0.ɵɵelement(24, \"ion-icon\", 6);\n    i0.ɵɵtext(25, \" Save\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"div\", 2)(27, \"ion-text\", 7);\n    i0.ɵɵlistener(\"click\", function PasswordDialogComponent_ion_content_5_Template_ion_text_click_27_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.dismiss());\n    });\n    i0.ɵɵtext(28, \"Never mind\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(29, \"br\")(30, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.oldPasscodeInput);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.passcodeInput);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.passcodeReinput);\n  }\n}\n\nexport let PasswordDialogComponent = /*#__PURE__*/(() => {\n  class PasswordDialogComponent {\n    constructor(modalController, platform, toastController, nativeStorage) {\n      this.modalController = modalController;\n      this.platform = platform;\n      this.toastController = toastController;\n      this.nativeStorage = nativeStorage;\n      this.oldPasscodeInput = '';\n      this.passcodeInput = '';\n      this.passcodeReinput = '';\n      this.passcodeSet = true;\n    }\n\n    ngOnInit() {\n      this.platform.ready().then(() => {\n        Preferences.get({\n          key: 'passcode'\n        }).then(out => {\n          this.passcodeSet = true;\n          this.encryptedPasscode = out.value;\n        }).catch(err => {\n          this.passcodeSet = false;\n          console.log('Saving error: ' + JSON.stringify(err));\n        });\n      }).catch(err => {\n        alert('Platform load error: ' + JSON.stringify(err));\n      });\n    }\n\n    dismiss() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        Haptics.impact({\n          style: ImpactStyle.Light\n        });\n        yield _this.modalController.dismiss(_this.passcodeInput);\n      })();\n    }\n\n    saveNewPassword() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const toast = yield _this2.toastController.create({\n          message: '',\n          position: 'top',\n          duration: 2000,\n          color: 'danger'\n        });\n\n        if (_this2.passcodeInput === '') {\n          Haptics.notification({\n            type: NotificationType.Warning\n          });\n          toast.message = 'Passcode is required!';\n          toast.color = 'danger';\n          yield toast.present();\n        } else if (_this2.passcodeReinput === '') {\n          Haptics.notification({\n            type: NotificationType.Warning\n          });\n          toast.message = 'Passcode re-entry is required!';\n          toast.color = 'danger';\n          yield toast.present();\n        } else if (_this2.passcodeReinput !== _this2.passcodeInput) {\n          Haptics.notification({\n            type: NotificationType.Warning\n          });\n          toast.message = 'Passcode re-entry is different than passcode!';\n          toast.color = 'danger';\n          _this2.passcodeReinput = '';\n          yield toast.present();\n        } else {\n          Haptics.notification({\n            type: NotificationType.Success\n          });\n          toast.message = 'Saved!';\n          toast.color = 'success';\n\n          _this2.nativeStorage.setItem('passcode', CryptoJS.AES.encrypt('passcode', _this2.passcodeInput).toString()).then(() => {\n            toast.present();\n\n            _this2.dismiss();\n          }).catch(err => {\n            Haptics.notification({\n              type: NotificationType.Warning\n            });\n            toast.message = 'Error! ' + JSON.stringify(err);\n            toast.color = 'danger';\n          });\n        }\n      })();\n    }\n\n    readJournal(id) {\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const fileName = 'Mirror-app/' + id + '.txt';\n          Filesystem.readFile({\n            path: fileName,\n            directory: Directory.Documents,\n            encoding: Encoding.UTF8\n          }).then(contents => {\n            resolve(JSON.parse(contents.data));\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      })();\n    }\n\n    saveJournal(id, data) {\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const fileName = 'Mirror-app/' + id + '.txt';\n          Filesystem.writeFile({\n            path: fileName,\n            data: data,\n            directory: Directory.Documents,\n            encoding: Encoding.UTF8\n          }).then(() => {\n            resolve(true);\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      })();\n    }\n\n    resetPassword() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const toast = yield _this3.toastController.create({\n          message: '',\n          position: 'top',\n          duration: 2000,\n          color: 'danger'\n        });\n\n        if (CryptoJS.AES.decrypt(_this3.encryptedPasscode, _this3.oldPasscodeInput).toString(CryptoJS.enc.Utf8) !== 'passcode') {\n          Haptics.notification({\n            type: NotificationType.Warning\n          });\n          toast.message = 'Current passcode is wrong!';\n          toast.color = 'danger';\n          yield toast.present();\n        } else if (_this3.passcodeInput === '') {\n          Haptics.notification({\n            type: NotificationType.Warning\n          });\n          toast.message = 'New passcode is required!';\n          toast.color = 'danger';\n          yield toast.present();\n        } else if (_this3.passcodeReinput === '') {\n          Haptics.notification({\n            type: NotificationType.Warning\n          });\n          toast.message = 'New passcode re-entry is required!';\n          toast.color = 'danger';\n          yield toast.present();\n        } else if (_this3.passcodeReinput !== _this3.passcodeInput) {\n          Haptics.notification({\n            type: NotificationType.Warning\n          });\n          toast.message = 'New passcode re-entry is different than passcode!';\n          toast.color = 'danger';\n          _this3.passcodeReinput = '';\n          yield toast.present();\n        } else {\n          Haptics.notification({\n            type: NotificationType.Success\n          });\n          toast.message = 'Saved!';\n          toast.color = 'success';\n          Filesystem.stat({\n            path: 'Mirror-app/mirrorJournals.txt',\n            directory: Directory.Documents\n          }).then(() => {\n            Filesystem.readFile({\n              path: 'Mirror-app/mirrorJournals.txt',\n              directory: Directory.Documents,\n              encoding: Encoding.UTF8\n            }).then(out => {\n              const journals = JSON.parse(out.data);\n\n              for (const i in journals) {\n                if (journals.hasOwnProperty(i)) {\n                  const read = _this3.readJournal(journals[i].id);\n\n                  read.then(output => {\n                    /* tslint:disable:no-string-literal */\n                    if (output['locked']) {\n                      output['content'] = CryptoJS.AES.decrypt(output['content'], _this3.oldPasscodeInput).toString(CryptoJS.enc.Utf8);\n                      output['content'] = CryptoJS.AES.encrypt(output['content'], _this3.passcodeInput).toString();\n\n                      _this3.saveJournal(journals[i].id, JSON.stringify(output)).then(() => {\n                        if (i + 1 >= journals.length) {\n                          Preferences.set({\n                            key: 'passcode',\n                            value: CryptoJS.AES.encrypt('passcode', _this3.passcodeInput).toString()\n                          }).then(() => {\n                            toast.present();\n\n                            _this3.dismiss();\n                          }).catch(err => {\n                            toast.message = 'Error! ' + JSON.stringify(err);\n                            toast.color = 'danger';\n                          });\n                        }\n                      });\n                    }\n                  }).catch(err => {\n                    console.log('Error reading: ' + JSON.stringify(err));\n                  });\n                }\n              }\n            }).catch(err => {\n              console.log('Error reading: ' + JSON.stringify(err));\n            });\n          }).catch(err => {\n            if (err.code !== 13 || err.code !== 1) {\n              console.log('Error checking file: ' + JSON.stringify(err));\n            }\n          });\n        }\n      })();\n    }\n\n    savePassword() {\n      if (this.passcodeSet) {\n        this.resetPassword();\n      } else {\n        this.saveNewPassword();\n      }\n    }\n\n  }\n\n  PasswordDialogComponent.ɵfac = function PasswordDialogComponent_Factory(t) {\n    return new (t || PasswordDialogComponent)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i1.ToastController), i0.ɵɵdirectiveInject(i2.NativeStorage));\n  };\n\n  PasswordDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordDialogComponent,\n    selectors: [[\"app-password-dialog\"]],\n    decls: 6,\n    vars: 4,\n    consts: [[4, \"ngIf\"], [\"src\", \"../assets/mirror-images/assembly 4.png\"], [2, \"text-align\", \"center\"], [\"position\", \"stacked\"], [\"placeholder\", \"passcode\", \"type\", \"password\", \"pattern\", \"[0-9]*\", \"inputmode\", \"numeric\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"primary\", \"fill\", \"outline\", 3, \"click\"], [\"name\", \"save-outline\", \"slot\", \"start\"], [\"color\", \"danger\", 3, \"click\"]],\n    template: function PasswordDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\");\n        i0.ɵɵtemplate(2, PasswordDialogComponent_ion_title_2_Template, 2, 0, \"ion-title\", 0);\n        i0.ɵɵtemplate(3, PasswordDialogComponent_ion_title_3_Template, 2, 0, \"ion-title\", 0);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(4, PasswordDialogComponent_ion_content_4_Template, 26, 2, \"ion-content\", 0);\n        i0.ɵɵtemplate(5, PasswordDialogComponent_ion_content_5_Template, 31, 3, \"ion-content\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.passcodeSet);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.passcodeSet);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.passcodeSet);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passcodeSet);\n      }\n    },\n    dependencies: [i3.NgIf, i1.IonButton, i1.IonCard, i1.IonCardContent, i1.IonContent, i1.IonHeader, i1.IonIcon, i1.IonInput, i1.IonItem, i1.IonLabel, i1.IonText, i1.IonTitle, i1.IonToolbar, i1.TextValueAccessor, i4.NgControlStatus, i4.PatternValidator, i4.NgModel]\n  });\n  return PasswordDialogComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}