{"ast":null,"code":"import _asyncToGenerator from \"/Users/andrewrodebaugh/Downloads/think-app-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\nimport { Keyboard, KeyboardStyle } from '@capacitor/keyboard';\nimport { Preferences } from '@capacitor/preferences';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@kolkov/angular-editor\";\nimport * as i3 from \"@angular/forms\";\nexport let PopupEditorComponent = /*#__PURE__*/(() => {\n  class PopupEditorComponent {\n    constructor(modalController, platform) {\n      this.modalController = modalController;\n      this.platform = platform;\n      this.journalContent = '';\n      this.fullscreen = false;\n      this.fontsize = '';\n      this.editorConfig = {\n        editable: true,\n        spellcheck: true,\n        height: 'auto',\n        minHeight: '0',\n        maxHeight: 'auto',\n        width: 'auto',\n        minWidth: '0',\n        translate: 'yes',\n        enableToolbar: true,\n        showToolbar: true,\n        placeholder: 'What are you thinking about?',\n        defaultParagraphSeparator: '',\n        defaultFontName: '',\n        defaultFontSize: '',\n        fonts: [{\n          class: 'arial',\n          name: 'Arial'\n        }, {\n          class: 'times-new-roman',\n          name: 'Times New Roman'\n        }, {\n          class: 'calibri',\n          name: 'Calibri'\n        }, {\n          class: 'comic-sans-ms',\n          name: 'Comic Sans MS'\n        }],\n        sanitize: true,\n        toolbarPosition: 'top',\n        toolbarHiddenButtons: [['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'fontSize', 'insertVideo', 'removeFormat', 'link', 'unlink', 'subscript', 'superscript', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'undo', 'redo', 'textColor', 'backgroundColor', 'insertHorizontalRule', 'removeFormat', 'toggleEditorMode', 'fontName', 'insertImage']]\n      };\n    }\n\n    ngOnInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.platform.ready().then(() => {\n          const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n          if (systemDark) {\n            Keyboard.setStyle({\n              style: KeyboardStyle.Dark\n            });\n          } else {\n            Keyboard.setStyle({\n              style: KeyboardStyle.Light\n            });\n          }\n        });\n      })();\n    }\n\n    ionViewDidEnter() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const tempFontsize = yield Preferences.get({\n          key: 'fontsize'\n        });\n\n        if (tempFontsize.value) {\n          _this2.fontsize = tempFontsize.value;\n\n          if (_this2.fontsize === 'default') {\n            _this2.fontsize = '';\n          } else {\n            _this2.fontsize = _this2.fontsize + 'px';\n          }\n        } // this.editorConfig.defaultFontSize = this.fontsize;\n\n      })();\n    }\n\n    dismiss() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        Haptics.impact({\n          style: ImpactStyle.Light\n        });\n        yield _this3.modalController.dismiss(_this3.journalContent);\n      })();\n    }\n\n    fullScreen() {\n      /*const modal = await this.modalController.create({\n        component: PopupEditorComponent,\n        componentProps: {\n          journalContent: this.journalContent,\n          fullscreen: true\n        },\n        cssClass: 'modal-fullscreen',\n        backdropDismiss: false\n      });\n      modal.onDidDismiss().then((dataReturned) => {\n        if (dataReturned !== null) {\n          this.modalController.dismiss(dataReturned.data);\n        }\n      });\n      await modal.present();*/\n\n      return _asyncToGenerator(function* () {})();\n    }\n\n  }\n\n  PopupEditorComponent.ɵfac = function PopupEditorComponent_Factory(t) {\n    return new (t || PopupEditorComponent)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i1.Platform));\n  };\n\n  PopupEditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PopupEditorComponent,\n    selectors: [[\"app-popup-editor\"]],\n    inputs: {\n      journalContent: \"journalContent\",\n      fullscreen: \"fullscreen\"\n    },\n    decls: 8,\n    vars: 4,\n    consts: [[3, \"click\"], [\"slot\", \"start\"], [\"name\", \"chevron-down-outline\", \"slot\", \"icon-only\"], [3, \"ngModel\", \"config\", \"ngModelChange\"], [\"editor\", \"\"]],\n    template: function PopupEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0);\n        i0.ɵɵlistener(\"click\", function PopupEditorComponent_Template_ion_toolbar_click_1_listener() {\n          return ctx.dismiss();\n        });\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1)(3, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function PopupEditorComponent_Template_ion_button_click_3_listener() {\n          return ctx.dismiss();\n        });\n        i0.ɵɵelement(4, \"ion-icon\", 2);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(5, \"ion-content\")(6, \"angular-editor\", 3, 4);\n        i0.ɵɵlistener(\"ngModelChange\", function PopupEditorComponent_Template_angular_editor_ngModelChange_6_listener($event) {\n          return ctx.journalContent = $event;\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵstyleProp(\"font-size\", ctx.fontsize);\n        i0.ɵɵproperty(\"ngModel\", ctx.journalContent)(\"config\", ctx.editorConfig);\n      }\n    },\n    dependencies: [i1.IonButton, i1.IonButtons, i1.IonContent, i1.IonHeader, i1.IonIcon, i1.IonToolbar, i2.AngularEditorComponent, i3.NgControlStatus, i3.NgModel]\n  });\n  return PopupEditorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}