{"ast":null,"code":"import _asyncToGenerator from \"/Users/andrewrodebaugh/Downloads/think-app-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction NewAnalyzeComponent_ion_buttons_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ÉµÉµgetCurrentView();\n\n    i0.ÉµÉµelementStart(0, \"ion-buttons\", 5)(1, \"ion-button\", 1);\n    i0.ÉµÉµlistener(\"click\", function NewAnalyzeComponent_ion_buttons_7_Template_ion_button_click_1_listener() {\n      i0.ÉµÉµrestoreView(_r3);\n      const ctx_r2 = i0.ÉµÉµnextContext();\n      return i0.ÉµÉµresetView(ctx_r2.save());\n    });\n    i0.ÉµÉµtext(2, \"Save\");\n    i0.ÉµÉµelementEnd()();\n  }\n}\n\nfunction NewAnalyzeComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ÉµÉµgetCurrentView();\n\n    i0.ÉµÉµelementStart(0, \"div\", 9);\n    i0.ÉµÉµlistener(\"click\", function NewAnalyzeComponent_div_10_div_1_Template_div_click_0_listener() {\n      const restoredCtx = i0.ÉµÉµrestoreView(_r12);\n      const textIndex_r9 = restoredCtx.index;\n      const dataIndex_r5 = i0.ÉµÉµnextContext().index;\n      const ctx_r10 = i0.ÉµÉµnextContext();\n      return i0.ÉµÉµresetView(ctx_r10.releasePressEvent(dataIndex_r5, textIndex_r9));\n    });\n    i0.ÉµÉµelementEnd();\n  }\n\n  if (rf & 2) {\n    const text_r8 = ctx.$implicit;\n    const data_r4 = i0.ÉµÉµnextContext().$implicit;\n    i0.ÉµÉµproperty(\"innerHTML\", data_r4.highlight ? \"<mark>\" + text_r8 + \" </mark>\" : text_r8 + \" \", i0.ÉµÉµsanitizeHtml);\n  }\n}\n\nfunction NewAnalyzeComponent_div_10_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ÉµÉµgetCurrentView();\n\n    i0.ÉµÉµelementStart(0, \"div\", 10)(1, \"ion-textarea\", 11);\n    i0.ÉµÉµlistener(\"ngModelChange\", function NewAnalyzeComponent_div_10_div_2_Template_ion_textarea_ngModelChange_1_listener($event) {\n      i0.ÉµÉµrestoreView(_r16);\n      const data_r4 = i0.ÉµÉµnextContext().$implicit;\n      return i0.ÉµÉµresetView(data_r4.note = $event);\n    });\n    i0.ÉµÉµelementEnd()();\n  }\n\n  if (rf & 2) {\n    const data_r4 = i0.ÉµÉµnextContext().$implicit;\n    const ctx_r7 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"disabled\", !ctx_r7.newNote)(\"ngModel\", data_r4.note)(\"value\", data_r4.note);\n  }\n}\n\nfunction NewAnalyzeComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 6);\n    i0.ÉµÉµtemplate(1, NewAnalyzeComponent_div_10_div_1_Template, 1, 1, \"div\", 7);\n    i0.ÉµÉµtemplate(2, NewAnalyzeComponent_div_10_div_2_Template, 2, 3, \"div\", 8);\n    i0.ÉµÉµelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r4 = ctx.$implicit;\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"ngForOf\", data_r4.text);\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"ngIf\", data_r4.highlight);\n  }\n}\n\nexport let NewAnalyzeComponent = /*#__PURE__*/(() => {\n  class NewAnalyzeComponent {\n    constructor(modalCtrl, alertController, toastController) {\n      this.modalCtrl = modalCtrl;\n      this.alertController = alertController;\n      this.toastController = toastController;\n      this.data = [{\n        text: '',\n        highlight: false,\n        note: ''\n      }];\n      this.noteData = [{\n        text: [],\n        highlight: false,\n        note: ''\n      }];\n    }\n\n    presentTip() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.toast = yield _this.toastController.create({\n          header: 'ðŸ’¡ Tip',\n          message: 'Click on words to highlight them to take notes on your journal.',\n          color: 'warning',\n          position: 'bottom',\n          buttons: [{\n            text: 'Close',\n            role: 'cancel',\n            handler: () => {\n              console.log('Cancel clicked');\n            }\n          }]\n        });\n        yield _this.toast.present();\n      })();\n    }\n\n    ngOnInit() {\n      const allTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'i', 'strike', 'u', 'b', 'p'];\n      console.log(this.newNote);\n\n      if (this.newNote) {\n        this.noteData = [];\n        let splitText = this.data['content'].replaceAll('<', ' <').replaceAll('>', '> ').split(' ');\n        splitText = splitText.filter(e => e !== '');\n        const newText = [];\n        console.log(JSON.stringify(splitText));\n        const styles = [];\n        splitText.forEach((item, index) => {\n          if (item.includes('</') && item.includes('>')) {\n            const tag = item.replace('</', '').replace('>', '');\n            console.log('end: ' + JSON.stringify(styles));\n\n            if (styles.includes(tag)) {\n              styles.splice(styles.indexOf(tag), 1);\n              splitText[index] = item.replace('</' + tag + '>', '');\n            }\n          } else if (item.includes('<') && item.includes('>')) {\n            const tag = item.replace('<', '').replace('>', '');\n\n            if (allTags.includes(tag) && !styles.includes(tag)) {\n              styles.push(tag);\n              splitText[index] = item.replace('<' + tag + '>', '');\n            }\n          }\n\n          for (const i in styles) {\n            if (styles[i].includes('h')) {\n              splitText[index] = '<b class=\"' + styles[i] + '\">' + splitText[index] + '</b>';\n            } else {\n              splitText[index] = '<' + styles[i] + '>' + splitText[index] + '</' + styles[i] + '>';\n            }\n          }\n        });\n        this.noteData = [{\n          text: splitText,\n          highlight: false,\n          note: ''\n        }];\n        this.dataString = splitText;\n      } else {\n        // @ts-ignore\n        this.noteData = this.data;\n      }\n\n      this.presentTip();\n    }\n\n    dismiss() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this2.toast.dismiss();\n        yield _this2.modalCtrl.dismiss();\n      })();\n    }\n\n    save() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const alert = yield _this3.alertController.create({\n          header: 'Title',\n          inputs: [{\n            name: 'title',\n            type: 'text',\n            placeholder: 'My Note'\n          }],\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: () => {\n              console.log('Confirm Cancel');\n            }\n          }, {\n            text: 'Ok',\n            handler: out => {\n              _this3.toast.dismiss();\n\n              _this3.pickerName = out.title;\n              const saveData = {\n                name: _this3.pickerName,\n                data: _this3.noteData,\n                date: moment().format('LLLL')\n              };\n\n              _this3.modalCtrl.dismiss(saveData);\n            }\n          }]\n        });\n\n        if (_this3.newNote) {\n          yield alert.present();\n        } else {\n          const saveData = {\n            name: _this3.pickerName,\n            data: _this3.noteData,\n            date: moment().format('LLLL')\n          };\n          yield _this3.modalCtrl.dismiss(saveData);\n        }\n      })();\n    }\n\n    replaceAtIndex(array, index, content) {\n      const newArray = array;\n      newArray[index] = content;\n      return newArray;\n    }\n\n    insertAtIndex(array, index, content) {\n      const newArray = array;\n      newArray.splice(index, 0, content);\n      return newArray;\n    }\n\n    insertBeforeIndex(array, index, content) {\n      if (index === 0) {\n        return this.insertAtIndex(array, index, content);\n      } else {\n        return this.insertAtIndex(array, index - 1, content);\n      }\n    }\n\n    insertAfterIndex(array, index, content) {\n      return this.insertAtIndex(array, index + 1, content);\n    }\n\n    removeIndex(array, index) {\n      let firstArray = [];\n\n      if (index !== 0) {\n        firstArray = this.getLeftSide(array, index);\n      }\n\n      const secondArray = this.getRightSide(array, index);\n      return firstArray.concat(secondArray);\n    }\n\n    getLeftSide(array, index) {\n      return array.slice(0, index);\n    }\n\n    getRightSide(array, index) {\n      return array.slice(index + 1, array.length);\n    }\n\n    makeNewSplit(dataIndex, textIndex, end = false) {\n      const set = this.noteData[dataIndex].text[textIndex];\n      const leftSide = this.getLeftSide(this.noteData[dataIndex].text, textIndex);\n      const rightSide = this.getRightSide(this.noteData[dataIndex].text, textIndex);\n      this.noteData = this.replaceAtIndex(this.noteData, dataIndex, {\n        text: [set],\n        highlight: true,\n        note: ''\n      });\n\n      if (leftSide.length === 0) {\n        if (rightSide.length > 0) {\n          this.noteData = this.insertAfterIndex(this.noteData, dataIndex, {\n            text: rightSide,\n            highlight: false,\n            note: ''\n          });\n          console.log('right: ' + JSON.stringify(this.noteData));\n        }\n      } else {\n        if (end) {\n          this.noteData = this.insertBeforeIndex(this.noteData, dataIndex + 1, {\n            text: leftSide,\n            highlight: false,\n            note: ''\n          });\n        } else {\n          this.noteData = this.insertBeforeIndex(this.noteData, dataIndex, {\n            text: leftSide,\n            highlight: false,\n            note: ''\n          });\n        }\n\n        if (rightSide.length > 0) {\n          this.noteData = this.insertAfterIndex(this.noteData, dataIndex + 1, {\n            text: rightSide,\n            highlight: false,\n            note: ''\n          });\n        }\n      }\n    }\n\n    combineAtLeftIndex(dataIndex, textIndex) {\n      this.noteData[dataIndex - 1].text.push(this.noteData[dataIndex].text[textIndex]);\n      this.noteData[dataIndex].text = this.removeIndex(this.noteData[dataIndex].text, textIndex);\n    }\n\n    combineAtRightIndex(dataIndex, textIndex) {\n      this.noteData[dataIndex + 1].text.unshift(this.noteData[dataIndex].text[textIndex]);\n      this.noteData[dataIndex].text = this.removeIndex(this.noteData[dataIndex].text, textIndex);\n    }\n\n    combineAtBothIndex(dataIndex, textIndex) {\n      // this.combineAtRightIndex(dataIndex, textIndex);\n      let data = this.noteData[dataIndex - 1].text.concat(this.noteData[dataIndex].text);\n      data = data.concat(this.noteData[dataIndex + 1].text);\n      this.noteData = this.removeIndex(this.noteData, dataIndex + 1);\n      this.noteData = this.removeIndex(this.noteData, dataIndex);\n      this.noteData[dataIndex - 1].text = data;\n    }\n\n    releasePressEvent(dataIndex, textIndex) {\n      if (this.noteData[dataIndex].highlight) {\n        // Confirm remove highlight if text is in the notes.\n        // todo\n        if (dataIndex > 0) {\n          if (dataIndex + 1 === this.noteData.length) {\n            if (!this.noteData[dataIndex - 1].highlight && textIndex === 0) {\n              this.combineAtBothIndex(dataIndex, textIndex);\n            } else {\n              this.noteData[dataIndex].highlight = false;\n            }\n          } else {\n            if (!this.noteData[dataIndex - 1].highlight && textIndex === 0 && !this.noteData[dataIndex + 1].highlight && textIndex + 1 === this.noteData[dataIndex].text.length) {\n              this.combineAtBothIndex(dataIndex, textIndex);\n            } else if (!this.noteData[dataIndex - 1].highlight && textIndex === 0) {\n              this.combineAtLeftIndex(dataIndex, textIndex);\n            } else if (!this.noteData[dataIndex + 1].highlight && textIndex + 1 === this.noteData[dataIndex].text.length) {\n              this.combineAtRightIndex(dataIndex, textIndex);\n            } else {\n              this.noteData[dataIndex].highlight = false;\n            }\n          }\n        } else {\n          if (this.noteData.length === 1) {\n            this.noteData[dataIndex].highlight = false;\n          } else {\n            if (!this.noteData[dataIndex + 1].highlight && textIndex + 1 === this.noteData[dataIndex].text.length) {\n              this.combineAtRightIndex(dataIndex, textIndex);\n            } else {\n              this.noteData[dataIndex].highlight = false;\n            }\n          }\n        }\n      } else {\n        // Todo: I think all of this can be simplified/optimised\n        if (dataIndex > 0) {\n          if (dataIndex + 1 === this.noteData.length) {\n            if (this.noteData[dataIndex - 1].highlight && textIndex === 0) {\n              this.combineAtLeftIndex(dataIndex, textIndex);\n            } else {\n              this.makeNewSplit(dataIndex, textIndex, true);\n            }\n          } else {\n            if (this.noteData[dataIndex - 1].highlight && textIndex === 0 && this.noteData[dataIndex + 1].highlight && textIndex + 1 === this.noteData[dataIndex].text.length) {\n              if (this.noteData[dataIndex - 1].note === '' && this.noteData[dataIndex + 1].note === '') {\n                this.combineAtBothIndex(dataIndex, textIndex);\n              } else if (this.noteData[dataIndex - 1].note !== '' && this.noteData[dataIndex + 1].note !== '') {\n                this.makeNewSplit(dataIndex, textIndex);\n              } else if (this.noteData[dataIndex - 1].note !== '') {\n                this.combineAtRightIndex(dataIndex, textIndex);\n              } else {\n                this.combineAtLeftIndex(dataIndex, textIndex);\n              }\n            } else if (this.noteData[dataIndex - 1].highlight && textIndex === 0) {\n              this.combineAtLeftIndex(dataIndex, textIndex);\n            } else if (this.noteData[dataIndex + 1].highlight && textIndex + 1 === this.noteData[dataIndex].text.length) {\n              this.combineAtRightIndex(dataIndex, textIndex);\n            } else {\n              this.makeNewSplit(dataIndex, textIndex);\n            }\n          }\n        } else {\n          if (this.noteData.length === 1) {\n            this.makeNewSplit(dataIndex, textIndex);\n          } else {\n            if (this.noteData[dataIndex + 1].highlight && textIndex + 1 === this.noteData[dataIndex].text.length) {\n              this.combineAtRightIndex(dataIndex, textIndex);\n            } else {\n              this.makeNewSplit(dataIndex, textIndex);\n            }\n          }\n        }\n      }\n\n      this.dataString = JSON.stringify(this.noteData);\n    }\n\n  }\n\n  NewAnalyzeComponent.Éµfac = function NewAnalyzeComponent_Factory(t) {\n    return new (t || NewAnalyzeComponent)(i0.ÉµÉµdirectiveInject(i1.ModalController), i0.ÉµÉµdirectiveInject(i1.AlertController), i0.ÉµÉµdirectiveInject(i1.ToastController));\n  };\n\n  NewAnalyzeComponent.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: NewAnalyzeComponent,\n    selectors: [[\"app-new-analyze\"]],\n    inputs: {\n      pickerName: \"pickerName\",\n      data: \"data\",\n      newNote: \"newNote\"\n    },\n    decls: 11,\n    vars: 3,\n    consts: [[\"slot\", \"start\"], [3, \"click\"], [\"slot\", \"end\", 4, \"ngIf\"], [1, \"ion-padding\"], [\"class\", \"text-block\", 4, \"ngFor\", \"ngForOf\"], [\"slot\", \"end\"], [1, \"text-block\"], [\"class\", \"text-block\", 3, \"innerHTML\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"note-textholder\", 4, \"ngIf\"], [1, \"text-block\", 3, \"innerHTML\", \"click\"], [1, \"note-textholder\"], [\"placeholder\", \"Enter note here...\", \"autoGrow\", \"true\", \"spellcheck\", \"true\", 3, \"disabled\", \"ngModel\", \"value\", \"ngModelChange\"]],\n    template: function NewAnalyzeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0)(3, \"ion-button\", 1);\n        i0.ÉµÉµlistener(\"click\", function NewAnalyzeComponent_Template_ion_button_click_3_listener() {\n          return ctx.dismiss();\n        });\n        i0.ÉµÉµtext(4, \"Close\");\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(5, \"ion-title\");\n        i0.ÉµÉµtext(6);\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµtemplate(7, NewAnalyzeComponent_ion_buttons_7_Template, 3, 0, \"ion-buttons\", 2);\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(8, \"ion-content\", 3)(9, \"ion-text\");\n        i0.ÉµÉµtemplate(10, NewAnalyzeComponent_div_10_Template, 3, 2, \"div\", 4);\n        i0.ÉµÉµelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ÉµÉµadvance(6);\n        i0.ÉµÉµtextInterpolate(ctx.pickerName);\n        i0.ÉµÉµadvance(1);\n        i0.ÉµÉµproperty(\"ngIf\", ctx.newNote);\n        i0.ÉµÉµadvance(3);\n        i0.ÉµÉµproperty(\"ngForOf\", ctx.noteData);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i1.IonButton, i1.IonButtons, i1.IonContent, i1.IonHeader, i1.IonText, i1.IonTextarea, i1.IonTitle, i1.IonToolbar, i1.TextValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"ion-textarea[_ngcontent-%COMP%]{border-left-color:#0d0d0d;border-left-style:solid;padding-left:5px}@media (prefers-color-scheme: dark){ion-textarea[_ngcontent-%COMP%]{border-left-color:gray}}.note-textholder[_ngcontent-%COMP%]{padding:10px!important}.text-block[_ngcontent-%COMP%]{display:inline}\"]\n  });\n  return NewAnalyzeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}